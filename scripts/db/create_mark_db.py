# create_mark_db.py

import os
import logging
from sqlalchemy import create_engine, MetaData
from sqlalchemy.exc import OperationalError
from dotenv import load_dotenv
from sqlalchemy import text


# Set up logging
log_dir = os.path.join(os.path.dirname(__file__), "logs", "mark_db_logs")
os.makedirs(log_dir, exist_ok=True)
log_file = os.path.join(log_dir, "create_mark_db.log")

logging.basicConfig(
    filename=log_file,
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)

# Load environment variables
load_dotenv()

MYSQL_USER = os.getenv("MYSQL_USER")
MYSQL_PASSWORD = os.getenv("MYSQL_PASSWORD")
MYSQL_HOST = os.getenv("MYSQL_HOST", "127.0.0.1")
MYSQL_PORT = os.getenv("MYSQL_PORT", "3306")
MYSQL_DB = os.getenv("MYSQL_DB")

if not all([MYSQL_USER, MYSQL_PASSWORD, MYSQL_HOST, MYSQL_PORT, MYSQL_DB]):
    raise ValueError("❌ Missing environment variables in .env file.")

# Step 1: Connect to MySQL server (without specifying a DB)
base_url = f"mysql+pymysql://{MYSQL_USER}:{MYSQL_PASSWORD}@{MYSQL_HOST}:{MYSQL_PORT}"
engine = create_engine(base_url)
conn = engine.connect()
logging.info("✅ Successfully connected to MySQL server.")

# Step 2: Create the database if it doesn't exist
try:
    with engine.connect() as connection:
        connection.execution_options(isolation_level="AUTOCOMMIT").execute(
            text(f"CREATE DATABASE IF NOT EXISTS {MYSQL_DB}")
        )
        logging.info(f"✅ Database '{MYSQL_DB}' created or already exists.")
except OperationalError as e:
    logging.error(f"❌ Failed to create database '{MYSQL_DB}': {e} — Possible causes: invalid credentials, lack of privileges, or MySQL server not running.")
    raise

# Step 3: Connect to the new database
db_url = f"{base_url}/{MYSQL_DB}"
# Connection will be handled in the try block below
try:
    engine = create_engine(db_url)
    conn = engine.connect()
    logging.info(f"✅ Successfully connected to database '{MYSQL_DB}' at {MYSQL_HOST}:{MYSQL_PORT}.")
except OperationalError as e:
    logging.error(f"❌ Failed to connect to database '{MYSQL_DB}': {e} — Possible causes: wrong credentials, lack of privileges, or MySQL server not running.")
    raise
metadata = MetaData()

# Step 4: Create tables
from sqlalchemy import Table, Column, Integer, BigInteger, String, Float, Date, Boolean, DateTime

info = Table(
    "info", metadata,
    Column("company_id", Integer, primary_key=True, autoincrement=True),
    Column("symbol", String(10), unique=True, nullable=False),
    Column("shortName", String(255)),
    Column("longName", String(255)),
    Column("address1", String(255)),
    Column("city", String(100)),
    Column("state", String(100)),
    Column("zip", String(20)),
    Column("country", String(100)),
    Column("phone", String(50)),
    Column("website", String(255)),
    Column("industry", String(255)),
    Column("industryKey", String(100)),
    Column("industryDisp", String(255)),
    Column("sector", String(100)),
    Column("sectorKey", String(100)),
    Column("sectorDisp", String(255)),
    Column("fullTimeEmployees", Integer),
    Column("auditRisk", Integer),
    Column("boardRisk", Integer),
    Column("compensationRisk", Integer),
    Column("shareHolderRightsRisk", Integer),
    Column("overallRisk", Integer),
    Column("governanceEpochDate", Integer),
    Column("compensationAsOfEpochDate", Integer),
    Column("irWebsite", String(255)),
    Column("maxAge", Integer),
    Column("priceHint", Integer),
    Column("previousClose", Float),
    Column("open", Float),
    Column("dayLow", Float),
    Column("dayHigh", Float),
    Column("regularMarketPreviousClose", Float),
    Column("regularMarketOpen", Float),
    Column("regularMarketDayLow", Float),
    Column("regularMarketDayHigh", Float),
    Column("dividendRate", Float),
    Column("dividendYield", Float),
    Column("exDividendDate", Integer),
    Column("payoutRatio", Float),
    Column("fiveYearAvgDividendYield", Float),
    Column("beta", Float),
    Column("trailingPE", Float),
    Column("forwardPE", Float),
    Column("volume", BigInteger),
    Column("regularMarketVolume", BigInteger),
    Column("averageVolume", Integer),
    Column("averageVolume10days", Integer),
    Column("averageDailyVolume10Day", Integer),
    Column("bid", Float),
    Column("ask", Float),
    Column("bidSize", Integer),
    Column("askSize", Integer),
    Column("marketCap", Float),
    Column("fiftyTwoWeekLow", Float),
    Column("fiftyTwoWeekHigh", Float),
    Column("priceToSalesTrailing12Months", Float),
    Column("fiftyDayAverage", Float),
    Column("twoHundredDayAverage", Float),
    Column("trailingAnnualDividendRate", Float),
    Column("trailingAnnualDividendYield", Float),
    Column("currency", String(10)),
    Column("tradeable", Boolean),
    Column("enterpriseValue", Float),
    Column("profitMargins", Float),
    Column("floatShares", Float),
    Column("sharesOutstanding", Float),
    Column("sharesShort", Float),
    Column("sharesShortPriorMonth", Float),
    Column("sharesShortPreviousMonthDate", Integer),
    Column("dateShortInterest", Integer),
    Column("sharesPercentSharesOut", Float),
    Column("heldPercentInsiders", Float),
    Column("heldPercentInstitutions", Float),
    Column("shortRatio", Float),
    Column("shortPercentOfFloat", Float),
    Column("impliedSharesOutstanding", Float),
    Column("bookValue", Float),
    Column("priceToBook", Float),
    Column("totalAssets", BigInteger),
    Column("lastFiscalYearEnd", Integer),
    Column("nextFiscalYearEnd", Integer),
    Column("mostRecentQuarter", Integer),
    Column("earningsQuarterlyGrowth", Float),
    Column("netIncomeToCommon", Float),
    Column("trailingEps", Float),
    Column("forwardEps", Float),
    Column("lastSplitFactor", String(20)),
    Column("lastSplitDate", Integer),
    Column("enterpriseToRevenue", Float),
    Column("enterpriseToEbitda", Float),
    Column("52WeekChange", Float),
    Column("SandP52WeekChange", Float),
    Column("lastDividendValue", Float),
    Column("lastDividendDate", Integer),
    Column("quoteType", String(50)),
    Column("currentPrice", Float),
    Column("targetHighPrice", Float),
    Column("targetLowPrice", Float),
    Column("targetMeanPrice", Float),
    Column("targetMedianPrice", Float),
    Column("recommendationMean", Float),
    Column("recommendationKey", String(50)),
    Column("numberOfAnalystOpinions", Integer),
    Column("totalCash", Float),
    Column("totalCashPerShare", Float),
    Column("ebitda", Float),
    Column("totalDebt", Float),
    Column("quickRatio", Float),
    Column("currentRatio", Float),
    Column("totalRevenue", Float),
    Column("debtToEquity", Float),
    Column("revenuePerShare", Float),
    Column("returnOnAssets", Float),
    Column("returnOnEquity", Float),
    Column("grossProfits", Float),
    Column("freeCashflow", Float),
    Column("operatingCashflow", Float),
    Column("earningsGrowth", Float),
    Column("revenueGrowth", Float),
    Column("grossMargins", Float),
    Column("ebitdaMargins", Float),
    Column("operatingMargins", Float),
    Column("financialCurrency", String(10)),
    Column("language", String(20)),
    Column("region", String(10)),
    Column("typeDisp", String(50)),
    Column("quoteSourceName", String(100)),
    Column("triggerable", Boolean),
    Column("customPriceAlertConfidence", String(50)),
    Column("marketState", String(50)),
    Column("exchange", String(10)),
    Column("messageBoardId", String(100)),
    Column("exchangeTimezoneName", String(100)),
    Column("exchangeTimezoneShortName", String(10)),
    Column("gmtOffSetMilliseconds", Integer),
    Column("market", String(50)),
    Column("esgPopulated", Boolean),
    Column("postMarketTime", Integer),
    Column("regularMarketTime", Integer),
    Column("displayName", String(255)),
    Column("trailingPegRatio", Float),
    Column("earningsTimestamp", Integer),
    Column("earningsTimestampStart", Integer),
    Column("earningsTimestampEnd", Integer),
    Column("earningsCallTimestampStart", Integer),
    Column("earningsCallTimestampEnd", Integer),
    Column("isEarningsDateEstimate", Boolean),
    Column("epsCurrentYear", Float),
    Column("priceEpsCurrentYear", Float),
    Column("fiftyDayAverageChange", Float),
    Column("fiftyDayAverageChangePercent", Float),
    Column("twoHundredDayAverageChange", Float),
    Column("twoHundredDayAverageChangePercent", Float),
    Column("sourceInterval", Integer),
    Column("exchangeDataDelayedBy", Integer),
    Column("averageAnalystRating", String(50)),
    Column("cryptoTradeable", Boolean),
    Column("firstTradeDateMilliseconds", Float),
    Column("regularMarketChangePercent", Float),
    Column("regularMarketPrice", Float)
)

# Officers table
officers = Table(
    "officers", metadata,
    Column("officer_id", Integer, primary_key=True, autoincrement=True),
    Column("company_id", Integer, nullable=False),
    Column("name", String(255)),
    Column("title", String(255)),
    Column("age", Integer),
    Column("year_born", Integer),
    Column("fiscal_year", Integer),
    Column("total_pay", Float),
    Column("exercised_value", Float),
    Column("unexercised_value", Float)
)

# Price history table
history = Table(
    "history", metadata,
    Column("company_id", Integer, primary_key=True, nullable=False),
    Column("date", Date, primary_key=True, nullable=False),
    Column("open", Float),
    Column("high", Float),
    Column("low", Float),
    Column("close", Float),
    Column("volume", BigInteger),
    Column("dividends", Float),
    Column("stock_splits", Float),
)

financials = Table(
    "financials", metadata,
    Column("financials_id", Integer, primary_key=True, autoincrement=True),
    Column("company_id", Integer, nullable=False),
    Column("date", Date, nullable=False),
    Column("Tax_Effect_Of_Unusual_Items", Float),
    Column("Tax_Rate_For_Calcs", Float),
    Column("Normalized_EBITDA", Float),
    Column("Total_Unusual_Items", Float),
    Column("Total_Unusual_Items_Excluding_Goodwill", Float),
    Column("Net_Income_From_Continuing_Operation_Net_Minority_Interest", Float),
    Column("Reconciled_Depreciation", Float),
    Column("Reconciled_Cost_Of_Revenue", Float),
    Column("EBITDA", Float),
    Column("EBIT", Float),
    Column("Net_Interest_Income", Float),
    Column("Interest_Expense", Float),
    Column("Interest_Income", Float),
    Column("Normalized_Income", Float),
    Column("Net_Income_From_Continuing_And_Discontinued_Operation", Float),
    Column("Total_Expenses", Float),
    Column("Total_Operating_Income_As_Reported", Float),
    Column("Diluted_Average_Shares", Float),
    Column("Basic_Average_Shares", Float),
    Column("Diluted_EPS", Float),
    Column("Basic_EPS", Float),
    Column("Diluted_NI_Availto_Com_Stockholders", Float),
    Column("Net_Income_Common_Stockholders", Float),
    Column("Net_Income", Float),
    Column("Net_Income_Including_Noncontrolling_Interests", Float),
    Column("Net_Income_Continuous_Operations", Float),
    Column("Tax_Provision", Float),
    Column("Pretax_Income", Float),
    Column("Other_Income_Expense", Float),
    Column("Other_Non_Operating_Income_Expenses", Float),
    Column("Special_Income_Charges", Float),
    Column("Earnings_From_Equity_Interest", Float),
    Column("Gain_On_Sale_Of_Security", Float),
    Column("Write_Off", Float),
    Column("Net_Non_Operating_Interest_Income_Expense", Float),
    Column("Interest_Expense_Non_Operating", Float),
    Column("Interest_Income_Non_Operating", Float),
    Column("Operating_Income", Float),
    Column("Operating_Expense", Float),
    Column("Research_And_Development", Float),
    Column("Selling_General_And_Administration", Float),
    Column("Selling_And_Marketing_Expense", Float),
    Column("General_And_Administrative_Expense", Float),
    Column("Other_Gand_A", Float),
    Column("Gross_Profit", Float),
    Column("Cost_Of_Revenue", Float),
    Column("Total_Revenue", Float),
    Column("Operating_Revenue", Float),
)

balance_sheet = Table(
    "balance_sheet", metadata,
    Column("balance_sheet_id", Integer, primary_key=True, autoincrement=True),
    Column("company_id", Integer, nullable=False),
    Column("date", Date, nullable=False),
    Column("Treasury_Shares_Number", Float),
    Column("Ordinary_Shares_Number", Float),
    Column("Share_Issued", Float),
    Column("Net_Debt", Float),
    Column("Total_Debt", Float),
    Column("Tangible_Book_Value", Float),
    Column("Invested_Capital", Float),
    Column("Working_Capital", Float),
    Column("Net_Tangible_Assets", Float),
    Column("Capital_Lease_Obligations", Float),
    Column("Common_Stock_Equity", Float),
    Column("Total_Capitalization", Float),
    Column("Total_Equity_Gross_Minority_Interest", Float),
    Column("Stockholders_Equity", Float),
    Column("Gains_Losses_Not_Affecting_Retained_Earnings", Float),
    Column("Other_Equity_Adjustments", Float),
    Column("Retained_Earnings", Float),
    Column("Capital_Stock", Float),
    Column("Common_Stock", Float),
    Column("Preferred_Stock", Float),
    Column("Total_Liabilities_Net_Minority_Interest", Float),
    Column("Total_Non_Current_Liabilities_Net_Minority_Interest", Float),
    Column("Other_Non_Current_Liabilities", Float),
    Column("Tradeand_Other_Payables_Non_Current", Float),
    Column("Non_Current_Deferred_Liabilities", Float),
    Column("Non_Current_Deferred_Revenue", Float),
    Column("Non_Current_Deferred_Taxes_Liabilities", Float),
    Column("Long_Term_Debt_And_Capital_Lease_Obligation", Float),
    Column("Long_Term_Capital_Lease_Obligation", Float),
    Column("Long_Term_Debt", Float),
    Column("Current_Liabilities", Float),
    Column("Other_Current_Liabilities", Float),
    Column("Current_Deferred_Liabilities", Float),
    Column("Current_Deferred_Revenue", Float),
    Column("Current_Debt_And_Capital_Lease_Obligation", Float),
    Column("Current_Capital_Lease_Obligation", Float),
    Column("Current_Debt", Float),
    Column("Other_Current_Borrowings", Float),
    Column("Commercial_Paper", Float),
    Column("Pensionand_Other_Post_Retirement_Benefit_Plans_Current", Float),
    Column("Payables_And_Accrued_Expenses", Float),
    Column("Current_Accrued_Expenses", Float),
    Column("Payables", Float),
    Column("Other_Payable", Float),
    Column("Total_Tax_Payable", Float),
    Column("Income_Tax_Payable", Float),
    Column("Accounts_Payable", Float),
    Column("Total_Assets", Float),
    Column("Total_Non_Current_Assets", Float),
    Column("Other_Non_Current_Assets", Float),
    Column("Financial_Assets", Float),
    Column("Non_Current_Deferred_Assets", Float),
    Column("Non_Current_Deferred_Taxes_Assets", Float),
    Column("Investments_And_Advances", Float),
    Column("Investmentin_Financial_Assets", Float),
    Column("Available_For_Sale_Securities", Float),
    Column("Long_Term_Equity_Investment", Float),
    Column("Goodwill_And_Other_Intangible_Assets", Float),
    Column("Other_Intangible_Assets", Float),
    Column("Goodwill", Float),
    Column("net_p_p_e", Float),
    Column("Accumulated_Depreciation", Float),
    Column("gross_p_p_e", Float),
    Column("Leases", Float),
    Column("Construction_In_Progress", Float),
    Column("Other_Properties", Float),
    Column("Machinery_Furniture_Equipment", Float),
    Column("Buildings_And_Improvements", Float),
    Column("Land_And_Improvements", Float),
    Column("Properties", Float),
    Column("Current_Assets", Float),
    Column("Other_Current_Assets", Float),
    Column("Hedging_Assets_Current", Float),
    Column("Inventory", Float),
    Column("Finished_Goods", Float),
    Column("Work_In_Process", Float),
    Column("Raw_Materials", Float),
    Column("Receivables", Float),
    Column("Taxes_Receivable", Float),
    Column("Accounts_Receivable", Float),
    Column("Allowance_For_Doubtful_Accounts_Receivable", Float),
    Column("Gross_Accounts_Receivable", Float),
    Column("Cash_Cash_Equivalents_And_Short_Term_Investments", Float),
    Column("Other_Short_Term_Investments", Float),
    Column("Cash_And_Cash_Equivalents", Float),
    Column("Cash_Equivalents", Float),
    Column("Cash_Financial", Float),
    Column("other_investments", Float),
    Column("other_receivables", Float)
)

cashflow = Table(
    "cashflow", metadata,
    Column("cashflow_id", Integer, primary_key=True, autoincrement=True),
    Column("company_id", Integer, nullable=False),
    Column("period", Date, nullable=False),
    Column("Free_Cash_Flow", Float),
    Column("Repurchase_Of_Capital_Stock", Float),
    Column("Repayment_Of_Debt", Float),
    Column("Issuance_Of_Debt", Float),
    Column("Issuance_Of_Capital_Stock", Float),
    Column("Capital_Expenditure", Float),
    Column("Interest_Paid_Supplemental_Data", Float),
    Column("Income_Tax_Paid_Supplemental_Data", Float),
    Column("End_Cash_Position", Float),
    Column("Beginning_Cash_Position", Float),
    Column("Changes_In_Cash", Float),
    Column("Effect_Of_Exchange_Rate_Changes", Float),
    Column("Financing_Cash_Flow", Float),
    Column("Cash_Flow_From_Continuing_Financing_Activities", Float),
    Column("Net_Other_Financing_Charges", Float),
    Column("Proceeds_From_Stock_Option_Exercised", Float),
    Column("Cash_Dividends_Paid", Float),
    Column("Common_Stock_Dividend_Paid", Float),
    Column("Net_Common_Stock_Issuance", Float),
    Column("Common_Stock_Payments", Float),
    Column("Common_Stock_Issuance", Float),
    Column("Net_Issuance_Payments_Of_Debt", Float),
    Column("Net_Short_Term_Debt_Issuance", Float),
    Column("Short_Term_Debt_Payments", Float),
    Column("Short_Term_Debt_Issuance", Float),
    Column("Net_Long_Term_Debt_Issuance", Float),
    Column("Long_Term_Debt_Payments", Float),
    Column("Long_Term_Debt_Issuance", Float),
    Column("Investing_Cash_Flow", Float),
    Column("Cash_Flow_From_Continuing_Investing_Activities", Float),
    Column("Net_Other_Investing_Changes", Float),
    Column("Net_Investment_Purchase_And_Sale", Float),
    Column("Sale_Of_Investment", Float),
    Column("Purchase_Of_Investment", Float),
    Column("Net_Business_Purchase_And_Sale", Float),
    Column("Purchase_Of_Business", Float),
    Column("Net_PPE_Purchase_And_Sale", Float),
    Column("Purchase_Of_PPE", Float),
    Column("Operating_Cash_Flow", Float),
    Column("Cash_Flow_From_Continuing_Operating_Activities", Float),
    Column("Change_In_Working_Capital", Float),
    Column("Change_In_Other_Working_Capital", Float),
    Column("Change_In_Other_Current_Liabilities", Float),
    Column("Change_In_Other_Current_Assets", Float),
    Column("Change_In_Payables_And_Accrued_Expense", Float),
    Column("Change_In_Accrued_Expense", Float),
    Column("Change_In_Payable", Float),
    Column("Change_In_Account_Payable", Float),
    Column("Change_In_Tax_Payable", Float),
    Column("Change_In_Income_Tax_Payable", Float),
    Column("Change_In_Inventory", Float),
    Column("Change_In_Receivables", Float),
    Column("Changes_In_Account_Receivables", Float),
    Column("Other_Non_Cash_Items", Float),
    Column("Stock_Based_Compensation", Float),
    Column("Unrealized_Gain_Loss_On_Investment_Securities", Float),
    Column("Asset_Impairment_Charge", Float),
    Column("Deferred_Tax", Float),
    Column("Deferred_Income_Tax", Float),
    Column("Depreciation_Amortization_Depletion", Float),
    Column("Depreciation_And_Amortization", Float),
    Column("Amortization_Cash_Flow", Float),
    Column("Amortization_Of_Intangibles", Float),
    Column("Depreciation", Float),
    Column("Operating_Gains_Losses", Float),
    Column("Gain_Loss_On_Investment_Securities", Float),
    Column("Net_Income_From_Continuing_Operations", Float),
)

from sqlalchemy import DECIMAL, UniqueConstraint

dividends = Table(
    "dividends", metadata,
    Column("dividend_id", Integer, primary_key=True, autoincrement=True),
    Column("company_id", Integer, nullable=False),
    Column("date", Date, nullable=False),
    Column("tz_offset", String(6), nullable=True),
    Column("dividend", DECIMAL(20, 6), nullable=False),
    UniqueConstraint("company_id", "date", name="uk_company_date")
)

recommendations = Table(
    "recommendations", metadata,
    Column("recommendation_id", Integer, primary_key=True, autoincrement=True),
    Column("company_id", Integer, nullable=False),
    Column("period", String(10), nullable=False),
    Column("strongBuy", Integer),
    Column("buy", Integer),
    Column("hold", Integer),
    Column("sell", Integer),
    Column("strongSell", Integer),
)

sustainability = Table(
    "sustainability", metadata,
    Column("sustainability_id", Integer, primary_key=True, autoincrement=True),
    Column("company_id", Integer, nullable=False),
    Column("maxAge", Integer),
    Column("totalEsg", Float),
    Column("environmentScore", Float),
    Column("socialScore", Float),
    Column("governanceScore", Float),
    Column("highestControversy", Float),
    Column("peerCount", Integer),
    Column("esgPerformance", String(50)),
    Column("peerGroup", String(100)),
    Column("ratingYear", Integer),
    Column("ratingMonth", Integer),
    Column("peer_esg_score_performance_min", Float),
    Column("peer_esg_score_performance_avg", Float),
    Column("peer_esg_score_performance_max", Float),
    Column("peer_governance_performance_min", Float),
    Column("peer_governance_performance_avg", Float),
    Column("peer_governance_performance_max", Float),
    Column("peer_social_performance_min", Float),
    Column("peer_social_performance_avg", Float),
    Column("peer_social_performance_max", Float),
    Column("peer_environment_performance_min", Float),
    Column("peer_environment_performance_avg", Float),
    Column("peer_environment_performance_max", Float),
    Column("peer_highest_controversy_performance_min", Float),
    Column("peer_highest_controversy_performance_avg", Float),
    Column("peer_highest_controversy_performance_max", Float),
    Column("percentile", Float),
    Column("environmentPercentile", Float),
    Column("socialPercentile", Float),
    Column("governancePercentile", Float),
    Column("adult", Boolean),
    Column("alcoholic", Boolean),
    Column("animalTesting", Boolean),
    Column("catholic", Boolean),
    Column("controversialWeapons", Boolean),
    Column("smallArms", Boolean),
    Column("furLeather", Boolean),
    Column("gambling", Boolean),
    Column("gmo", Boolean),
    Column("militaryContract", Boolean),
    Column("nuclear", Boolean),
    Column("pesticides", Boolean),
    Column("palmOil", Boolean),
    Column("coal", Boolean),
    Column("tobacco", Boolean)
)

splits = Table(
    "splits", metadata,
    Column("split_id", Integer, primary_key=True, autoincrement=True),
    Column("company_id", Integer, nullable=False),
    Column("date", Date, nullable=False),
    Column("tz_offset", String(6), nullable=True),
    Column("split_ratio", Float, nullable=False),
    UniqueConstraint("company_id", "date", name="uk_company_date")
)

try:
    metadata.create_all(engine, tables=[
        info, officers, history, financials, balance_sheet,
        cashflow, dividends, recommendations, sustainability, splits
    ])
    logging.info("✅ All tables created successfully in 'mark_db'.")
except OperationalError as e:
    logging.error(f"Failed to create tables: {e}")